<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet href="/static/styles/feed.xsl" type="text/xsl"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Anirudh Sudhir</title>
    <link href="https://sudhir.live/" rel="self"/>
    <updated>2024-05-04T14:25:49+05:30</updated>
<entry>
        <title>Profiling with Go</title>
        <link href="https://sudhir.liveposts/profiling-with-go/index.html/>
        <id>https://sudhir.liveposts/profiling-with-go/index.html</id>
        <updated>2024-04-13T05:30:00+05:30</updated>
        <content type="html"><![CDATA[<h1 id="table-of-contents">Table of Contents <a class="anchor" href="#table-of-contents">#</a></h1>
<ul>
<li>
<a href="#introduction">Introduction</a><ul>
<li>
<a href="#using-the-nethttppprof-package-as-a-blank-import">Using the net/http/pprof package as a blank import</a></li>
<li>
<a href="#using-various-profiling-flags-present-in-the-go-test-command">Using various profiling flags present in the go test command</a></li>
</ul>
</li>
<li>
<a href="#walkthrough">Walkthrough</a><ul>
<li>
<a href="#initial-investigation">Initial investigation</a></li>
<li>
<a href="#analysing-line-by-line-performance">Analysing line-by-line performance</a></li>
<li>
<a href="#utilising-string-buffers-and-syncpool">Utilising string buffers and sync.Pool</a></li>
</ul>
</li>
</ul>
<hr>
<p>This post is about the first talk of the Go meetup on 13th April, 2024 in Bangalore.
This was a hand-on session, where the speaker used various profiling techniques to improve the performance of a sample application.</p>
<h2 id="introduction">Introduction <a class="anchor" href="#introduction">#</a></h2>
<p>The Go standard library has several built-in mechanisms for profiling:</p>
<ol>
<li>Using <a href="https://pkg.go.dev/net/http/pprof">net/http/pprof</a> as a blank import to profile a running application (such as a backend service)</li>
<li>Using various profiling flags present in the go test command</li>
<li>Utilising the <a href="https://pkg.go.dev/runtime/pprof">runtime/pprof</a> library to profile a certain block of code</li>
</ol>
<hr>
<h3 id="using-the-nethttppprof-package-as-a-blank-import">Using the net/http/pprof package as a blank import <a class="anchor" href="#using-the-nethttppprof-package-as-a-blank-import">#</a></h3>
<p>On performing a blank import of net/http/pprof, Go automatically attaches a debug/pprof endpoint to the application.
This endpoint contains an interactive web console which can be used to analyse the live profile data.</p>
<hr>
<h3 id="using-various-profiling-flags-present-in-the-go-test-command">Using various profiling flags present in the go test command <a class="anchor" href="#using-various-profiling-flags-present-in-the-go-test-command">#</a></h3>
<p>The go test command has several flags to profile an application. During the talk, the following two were covered:</p>
<ul>
<li><code>benchmem</code> - Prints memory allocations for benchmarks</li>
<li><code>cpuprofile file</code> - Writes a cpu profile to file</li>
</ul>
<p>Usage</p>
<pre><code class="language-sh">go test -bench . -benchmem -cpuprofile pprof.cpu
</code></pre>
<p>The cpuprofile flag generates a binary and a file that can analysed using pprof.</p>
<pre><code class="language-sh">go tool pprof app.test pprof.cpu
</code></pre>
<hr>
<h2 id="walkthrough">Walkthrough <a class="anchor" href="#walkthrough">#</a></h2>
<p>The demo used for the talk was a simple application that returned the user agent and latency of the endpoint.
During the load test of the initial version using wrk, it handled an average of 33,000 requests per second. While impressive, this number could be improved.</p>
<h3 id="initial-investigation">Initial investigation <a class="anchor" href="#initial-investigation">#</a></h3>
<p>The speaker first performed a benchmark using <code>net/http/pprof</code> to identify possible bottlenecks.</p>
<pre><code>go tool pprof -seconds &lt;duration&gt; -http &lt;profiling_url&gt; &lt;debug/pprof/profile_url_endpoint&gt;
</code></pre>
<p>The profile of the application can be generated using the above command.</p>
<p>The data can be visualised in different forms, such as a graph or a flame graph.</p>
<p>During the session, the regular graph was used.
It displayed the total runtime of each function call, the number of times it was invoked and other useful details.</p>
<p>A lot of time was taken by os.Hostname() present in the handler function. The os.Hostname() function retrieves the hostname of the machine, which is a syscall. By moving the call outside of the handler and invoking it just once, the total runtime of the function reduced from 2s to 0.2s.</p>
<figure>
<img src="images/pprof_debug_profile_graph.jpeg" alt="Image of the profile graph generated by pprof">
</figure>
<hr>
<h3 id="analysing-line-by-line-performance">Analysing line-by-line performance <a class="anchor" href="#analysing-line-by-line-performance">#</a></h3>
<p>The next step was to use the profiling flags present in the go test command to understand the time taken during different operations. By using the<code>cpuprofile file</code> flag, the profile will be written to a file for further analysis.</p>
<figure>
<img src="images/go_test_flags.jpeg" alt="Image of the generation of the cpuprofile file">
</figure>
<p>As seen above, the memory allocation for the benchmark is printed to stdout. Here, the application performed 12 allocations for a total of 447 bytes per operation.</p>
<pre><code>go tool pprof &lt;binary_name&gt; &lt;profile_file&gt;
</code></pre>
<p>This command starts an interactive application. Commands such as <code>web</code> and <code>disasm</code> can be used to understand different parts of the profile.</p>
<p>The <code>list &lt;function_name&gt;</code> command displays the time time taken by certain operations of the particular function.</p>
<figure>
<img src="images/pprof_line_time.jpeg" alt="Image of the time taken by various operations, analysed using pprof">
</figure>
<p>The <code>disasm &lt;function&gt;</code> command shows the assembly code of the function along with the time taken by some operations.</p>
<figure>
<img src="images/pprof_line_asm_time.jpeg" alt="Image of the assembly of the handler function">
</figure>
<hr>
<h3 id="utilising-string-buffers-and-syncpool">Utilising string buffers and sync.Pool <a class="anchor" href="#utilising-string-buffers-and-syncpool">#</a></h3>
<p>The analysis of the results revealed that string slice appends were consuming most of the time. These operations involve repeated memory allocations to increase the slice capacity.</p>
<p>As the string slice was returned at the end of the function, a string buffer could be utilised to store and append the contents of the response. By creating a bytes.Buffer and using WriteString() to add contents to it, the number of allocations and time taken could be reduced.</p>
<p>Lastly, the number of allocation of bytes.Buffer objects could be reduced by using a sync.Pool. A sync.Pool is a type that holds a set of temporary objects.
These objects can be reused later, leading to fewer allocations. The pros of using a sync.Pool outweigh the cons as a bytes.Buffer object created during one request could be reused later.</p>
<p>After all of these optimisations, each operation took about 520ns, a huge improvement from the 716ns reported by the initial benchmark.</p>
]]></content>
    </entry>
<entry>
        <title>Qapture</title>
        <link href="https://sudhir.liveposts/qapture/index.html/>
        <id>https://sudhir.liveposts/qapture/index.html</id>
        <updated>2024-03-09T05:30:00+05:30</updated>
        <content type="html"><![CDATA[<h1 id="table-of-contents">Table of Contents <a class="anchor" href="#table-of-contents">#</a></h1>
<ul>
<li>
<a href="#about">About</a></li>
<li>
<a href="#background">Background</a></li>
<li>
<a href="#whats-a-forensic-image">What’s a forensic image?</a></li>
<li>
<a href="#how-jpegs-are-stored-in-memory">How JPEGs are stored in memory</a></li>
<li>
<a href="#block-size">Block Size</a></li>
<li>
<a href="#how-qapture-works">How qapture works</a></li>
</ul>
<hr>
<p>This post is part of a talk I gave at the Mentor Expo conducted by <a href="https://homebrew.hsp-ec.xyz">HSP</a>, the developer community at my college. I delivered the talk on 23rd November, 2023.</p>
<h3 id="about">About <a class="anchor" href="#about">#</a></h3>
<p>qapture is a CLI tool to recover deleted JPEGs from a forensic image.</p>
<p><a href="https://github.com/anirudhsudhir/qapture">Link to the repo</a></p>
<hr>
<h3 id="background">Background <a class="anchor" href="#background">#</a></h3>
<p>When a file is deleted, it is removed from the file tree structure. However, the individual bytes remain in memory until they are overwritten by the OS.</p>
<p>This implies that if all of the individual bytes are read from memory and pieced together in the right order and format, the file could be recovered in certain cases.</p>
<hr>
<h3 id="whats-a-forensic-image">What’s a forensic image? <a class="anchor" href="#whats-a-forensic-image">#</a></h3>
<p>Forensic images are exact copies or replicas of digital storage media, typically created for the purpose of preserving and analyzing digital evidence. There are several types of forensic images such as RAW images, dd (Disk Dump) images and EO1(Encase) images.</p>
<p>qapture uses the RAW image format since it contains a bit-by-bit copy of the entire storage medium. The metadata associated with the disk or the files are stored separately, simplifying recovery.</p>
<figure>
<img src="images/qapture_ForensicImage.png" alt="Schematic of a forensic image">
</figure>
<hr>
<h3 id="how-jpegs-are-stored-in-memory">How JPEGs are stored in memory <a class="anchor" href="#how-jpegs-are-stored-in-memory">#</a></h3>
<p>A JPEG file is divided into segments, each starting with a marker. Markers are two bytes long and start with 0xFF. Some markers define segments that contain specific information about the image, such as the image dimensions, color space information, and more.</p>
<p>Of these, the SOI(Start of image) along with the APPn(Application specific codes) and EOI(End of image) markers are the ones that denote the beginning and end of the JPEG file.</p>
<p>These markers are represented by various hexadecimal codes:</p>
<ul>
<li>SOI - 0xFF(255), 0xD8(216)</li>
<li>APPn - 0xFF(255), 0xEn(224 to 239) (where n represents any hexadecimal digit)</li>
<li>EOI - 0xFF(255), 0xD9(217)</li>
</ul>
<figure>
<img src="images/qapture_SegmentedMarkers.png" alt="Segmented view of various markers in a JPEG file">
</figure>
<hr>
<h3 id="block-size">Block Size <a class="anchor" href="#block-size">#</a></h3>
<p>Block size refers to the minimum amount of data that can be stored or retrieved at a time. When a file is created, the file system allocates space for it in terms of blocks. The file's data is then divided into chunks accordingly. Even if a particular block is not completely used, the next file is stored in the following one, with the remaining free space in the current block called slack space. Block sizes vary depending upon the filesystem. For example, the FAT filesystem usually utilizes 512 bytes per block.</p>
<p>Blocks are highly important as they drastically increase the speed of any file IO operation.</p>
<figure>
<img src="images/qapture_BlocksFS.png" alt="Files stored as Blocks">
</figure>
<hr>
<h3 id="how-qapture-works">How qapture works <a class="anchor" href="#how-qapture-works">#</a></h3>
<p>qapture is a CLI tool.
The user runs it by passing the path to the RAW image as an argument.</p>
<pre><code class="language-sh">./qapture PATH_TO_IMAGE.raw
</code></pre>
<p>qapture checks if a valid path is provided and prompts the user for the block size of the RAW image. It then reads <strong>X</strong> bytes of the image, where <strong>X</strong> corresponds to the block size, and stores it in an array.</p>
<p>It searches the block for a new JPEG by checking if:</p>
<ul>
<li>the first two bytes are 255(0xFF) and 216(0xD8) (indicating SOI)</li>
<li>the third byte is 255 (0xFF) and the fourth is between 224 and 239 (0xEn) (indicating APPn)</li>
</ul>
<p>If these conditions are satisfied, it writes the array to a new JPEG file in the binary format.</p>
<p>While writing the array to the file, qapture checks if the current and the following byte is 255(0xFF) and 217(0xD9) respectively (indicating EOI).</p>
<ul>
<li>
<p>If an EOI is encountered, the EOI marker is written and file is closed.
qapture then reads the following block from the RAW image.</p>
</li>
<li>
<p>If no EOI is encountered, qapture writes the entire array to the JPEG and reads the following block.</p>
</li>
</ul>
<p>This process continues until all of the RAW image is read.</p>
<figure>
<img src="images/qapture_Working.png" alt="Schematic depicting how qapture functions">
</figure>
<p>Once the entire image is read, qapture prints the number of JPEGs which have been successfully recovered.
These JPEGs are stored in an 'images' directory created by the application within the project directory.</p>
]]></content>
    </entry>
<entry>
        <title>Projects</title>
        <link href="https://sudhir.liveprojects.html/>
        <id>https://sudhir.liveprojects.html</id>
        <updated>2024-05-04T05:30:00+05:30</updated>
        <content type="html"><![CDATA[<p>All of my projects are hosted on Github at <a href="https://github.com/anirudhsudhir">anirudhsudhir</a></p>
<h1 id="projects">Projects</h1>
<p><a href="https://github.com/acmpesuecc/Anna">Anna</a> (In Progress)</p>
<p>A static site generator written in Go. This is a team project.
Link to the blog: <a href="/posts/building-anna.html">anna</a></p>
<p><a href="https://github.com/anirudhsudhir/Bingo">Bingo</a></p>
<p>A server-side rendered pastebin written in Go with data persistence, middleware and sessions.</p>
<p><a href="https://github.com/anirudhsudhir/Spidey-v2">Spidey-v2</a></p>
<p>A multi-threaded web crawler written in Go, capable of extremely fast crawl rates.
It has a consistent crawl rate of over 10k links per minute.
On one test, Spidey discovered 16,000 links in a minute.</p>
<p>This project is a rewrite of <a href="https://github.com/anirudhsudhir/Spidey">Spidey</a>.</p>
<p><a href="https://github.com/anirudhsudhir/Qapture">Qapture</a></p>
<p>A command-line tool written in C to recover deleted JPEGs from a forensic RAW image.
Link to the blog: <a href="/posts/qapture.html">qapture</a></p>
<p><a href="https://github.com/anirudhsudhir/Librarian">Librarian</a></p>
<p>A command-line library management system written in Java with data persistence.</p>
]]></content>
    </entry>
<entry>
        <title>Timeline</title>
        <link href="https://sudhir.livetimeline.html/>
        <id>https://sudhir.livetimeline.html</id>
        <updated>2024-05-04T05:30:00+05:30</updated>
        <content type="html"><![CDATA[<h1 id="table-of-contents">Table of Contents <a class="anchor" href="#table-of-contents">#</a></h1>
<ul>
<li>
<a href="#timeline">Timeline</a><ul>
<li>
<a href="#2024">2024</a><ul>
<li>
<a href="#march">March</a></li>
</ul>
</li>
<li>
<a href="#2023">2023</a><ul>
<li>
<a href="#november">November</a></li>
<li>
<a href="#october">October</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="timeline">Timeline <a class="anchor" href="#timeline">#</a></h2>
<h3 id="2024">2024 <a class="anchor" href="#2024">#</a></h3>
<h4 id="march">March <a class="anchor" href="#march">#</a></h4>
<ul>
<li><a href="https://github.com/argoproj/argo-cd/pull/17459">Contributed</a> to the Argo CD project.</li>
</ul>
<h3 id="2023">2023 <a class="anchor" href="#2023">#</a></h3>
<h4 id="november">November <a class="anchor" href="#november">#</a></h4>
<ul>
<li>Gave a <a href="/posts/qapture/">talk</a> on one of my projects during the HSP Mentor Expo.</li>
</ul>
<h4 id="october">October <a class="anchor" href="#october">#</a></h4>
<ul>
<li>Made my first open source <a href="https://github.com/ghostfolio/ghostfolio/pull/2414">contribution</a> as part of Hacktoberfest 2023.</li>
</ul>
]]></content>
    </entry>
<entry>
        <title>Contact</title>
        <link href="https://sudhir.livecontact.html/>
        <id>https://sudhir.livecontact.html</id>
        <updated>2024-05-04T05:30:00+05:30</updated>
        <content type="html"><![CDATA[<h2 id="contact-information">Contact information</h2>
<p>You can reach out to me at <a href="mailto:anirudh.sudhir1@gmail.com">anirudh.sudhir1@gmail.com</a></p>
<p>Here's a link to my <a href="/resume.pdf">resume</a></p>
<p>You can find some of the cool projects I've built and contributed to on my <a href="https://github.com/anirudhsudhir">Github</a></p>
<p>Socials: <a href="https://www.linkedin.com/in/anirudhsudhir/">LinkedIn</a></p>
]]></content>
    </entry>
<entry>
        <title>Home</title>
        <link href="https://sudhir.liveindex.html/>
        <id>https://sudhir.liveindex.html</id>
        <updated>2024-02-24T05:30:00+05:30</updated>
        <content type="html"><![CDATA[<h2 id="hello-im-anirudh">Hello! I'm Anirudh</h2>
<p>A computer science student and tech enthusiast. Welcome to my home on the internet!</p>
<h3 id="about-me">About Me</h3>
<p>I'm a freshman at PES University, Bangalore.
I love exploring and building projects.</p>
<p>My current interests include distributed systems and databases, systems programming and back-end development.</p>
<blockquote>
<p>I'm currently on the lookout for internship opprtunities. If you're hiring, please <a href="/contact.html">reach</a> out.
Here's my <a href="/resume.pdf">resume</a>.</p>
</blockquote>
<h3 id="what-im-working-on-right-now">What I'm working on right now</h3>
<ul>
<li>Exploring distributed systems and databases</li>
<li>Learning the Rust programming language</li>
<li>Building <a href="https://github.com/acmpesuecc/anna">anna</a>, a static site generator written in Go</li>
<li>Working on this site</li>
</ul>
<h3 id="guide-to-this-site">Guide to this site</h3>
<ul>
<li>You can find my blogs at <a href="/posts.html">posts</a></li>
<li>The <a href="/projects.html">projects</a> section lists some of the projects I've worked on</li>
<li><a href="/timeline.html">Timeline</a> contains details of my open source contributions and talks I've delivered</li>
<li>To quickly find posts of a specific category, head to the <a href="/tags.html">tags</a> page</li>
<li>To reach out, visit the <a href="/contact.html">contact</a> page</li>
</ul>
]]></content>
    </entry>
<entry>
        <title>Building anna</title>
        <link href="https://sudhir.liveposts/building-anna/index.html/>
        <id>https://sudhir.liveposts/building-anna/index.html</id>
        <updated>2024-04-04T05:30:00+05:30</updated>
        <content type="html"><![CDATA[<h1 id="table-of-contents">Table of Contents <a class="anchor" href="#table-of-contents">#</a></h1>
<ul>
<li>
<a href="#introduction">Introduction</a></li>
<li>
<a href="#the-small-but-big-decision">The small but big decision!</a><ul>
<li>
<a href="#whats-in-a-name">What's in a name?</a></li>
</ul>
</li>
<li>
<a href="#genesis">Genesis</a></li>
<li>
<a href="#what-made-us-develop-this-to-a-great-extent">What made us develop this to a great extent?</a></li>
<li>
<a href="#benchmarks-can-anna-lift">Benchmarks! Can anna lift??</a><ul>
<li>
<a href="#we-cook-">We cook! 🍳</a></li>
</ul>
</li>
<li>
<a href="#profiling-wip">Profiling (WIP)</a></li>
<li>
<a href="#live-reload">Live Reload</a><ul>
<li>
<a href="#prototype">Prototype</a></li>
<li>
<a href="#improved-version">Improved version</a></li>
</ul>
</li>
<li>
<a href="#a-big-rewrite-when-we-went-for-a-tdd-approach-wip">A big rewrite (when we went for a TDD approach) (WIP)</a><ul>
<li>
<a href="#a-new-proposed-rendering-system">A new proposed rendering system</a><ul>
<li>
<a href="#maingo">main.go</a></li>
<li>
<a href="#pkg-modules">pkg/ modules</a></li>
<li>
<a href="#splitting-the-render-pipeline">Splitting the render pipeline</a></li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#tags-wip">Tags (WIP)</a></li>
<li>
<a href="#to-search-or-not-to-search-">To search or not to search? 🤔</a></li>
<li>
<a href="#js-integration-as-plugins">JS integration as plugins</a></li>
<li>
<a href="#wizard">Wizard</a><ul>
<li>
<a href="#raw-html">Raw HTML</a></li>
<li>
<a href="#changelog-showcasing-important-additions-which-are-yet-to-be-added-to-this-blog">changelog: showcasing important additions, which are yet to be added to this blog</a></li>
</ul>
</li>
<li>
<a href="#feedback--learnings">Feedback? / Learnings</a></li>
</ul>
<hr>
<p>This post is currently work in progress and has been co-authored by <a href="https://github.com/DedLad">Adhesh</a>, <a href="https://github.com/bwaklog">Aditya</a> and <a href="https://github.com/polarhive">Nathan</a>.</p>
<hr>
<p>There are several amazing SSGs out there, like <a href="https://gohugo.io/">Hugo</a> and
<a href="https://www.11ty.dev/">11ty</a>. Building your own SSG is an amazing learning
experience. It also motivates one to maintain and improve their personal site.</p>
<blockquote>
<p>Presented and written by Adhesh, Anirudh, Aditya and Nathan</p>
</blockquote>
<p>Building personal blogs from the ground up can be a <em>tedious process</em>. Some of us
have had our hands deep in vanilla HTML and CSS, which isn't fun to maintain. We
all want to get to the point and share our thoughts on the web. But, there is a
small bump that stops us from doing so.</p>
<p>Maintaining your personal site is like working with your own Neovim
configuration. Every issue fixed would lead to an entirely unrelated bug. There
is a lot of time spent fixing things rather than getting productive work done.</p>
<blockquote>
<p>A static site generator is an immensely useful application</p>
</blockquote>
<figure>
<img src="images/lighthouse.png" alt="Lighthouse scores of the anna-docs page">
</figure>
<p>It can simplify the whole process: allowing you to spend time and energy
on quality content. Keep reading to find out how we designed anna <code>v1.0.0</code></p>
<hr>
<h2 id="introduction">Introduction <a class="anchor" href="#introduction">#</a></h2>
<p>ACM-PESU ECC conducts the ACM Industrial Experience Program (AIEP), an annual program that spans six weeks.</p>
<blockquote>
<p>It involves students working as a team to develop an industrial-level
project. AIEP intends to give students hands-on experience with real-world
projects. It is an excellent opportunity to interact with like-minded
individuals.</p>
</blockquote>
<p>Our AIEP team consisted of <a href="https://github.com/DedLad">Adhesh</a>, <a href="https://github.com/bwaklog">Aditya</a>,
<a href="https://github.com/polarhive">Nathan</a>, and <a href="https://github.com/anirudhsudhir">Anirudh</a>.</p>
<p>Our mentors (cool ass senior names!) gave us some great ideas for a team of us
four freshers.
We were puzzled whether to build a distributed Postgres clone or a load balancer.</p>
<p>Deep discussions over a week got us to the topic of making
blog sites and how tiring it is to work with, which only gets worse as you
write more and more content for your internet home.</p>
<p>This and inspirations from <a href="https://github.com/anirudhRowjee/saaru">Saaru</a> and
<a href="https://github.com/NavinShrinivas/sapling">Sapling</a> pushed us to tackle this
problem with our own SSG.</p>
<pre><code class="language-text">    ___
   /   |  ____  ____  ____ _
  / /| | / __ \/ __ \/ __ `/
 / ___ |/ / / / / / / /_/ /
/_/  |_/_/ /_/_/ /_/\__,_/

A static site generator in Go

</code></pre>
<h2 id="the-small-but-big-decision">The small but big decision! <a class="anchor" href="#the-small-but-big-decision">#</a></h2>
<p>Anna is written in <a href="https://go.dev">Go</a>. We considered writing it in Rust, but
that came with a steep learning curve.
Go is a powerful language and has excellent concurrency support, which suited our requirements to build a performant application.</p>
<h3 id="whats-in-a-name">What's in a name? <a class="anchor" href="#whats-in-a-name">#</a></h3>
<p>Probably the first thing that the four of us came across when joining ACM and HSP was the famous Saaru repository.
<a href="https://github.com/anirudhRowjee/saaru">Saaru</a>,
one of the projects that inspired our ssg,
is derived from a <a href="https://en.wikipedia.org/wiki/Kannada">Kannada</a> word.
Saaru is a thin lentil soup, usually served with rice.</p>
<blockquote>
<p>In Kannada, rice is referred to as 'anna'(ಅನ್ನ) pronounced <i>/ɐnːɐ/</i></p>
</blockquote>
<p>This was just a playful stunt that we engaged in. We planned on beating Saaru at
site render times, optimizing at runtime.</p>
<hr>
<h2 id="genesis">Genesis <a class="anchor" href="#genesis">#</a></h2>
<p>We began the project in a unique manner, with each of us creating our own
prototype of the SSG. This was done to familiarize everyone with the Go
toolchain.</p>
<p>The first version of the SSG did just three things. It rendered markdown
(stored in files in a content folder in the project directory) to HTML. This
HTML was injected into a layout.html file and served over a local web server.
Later, we implemented a front matter YAML parser to retrieve page metadata</p>
<hr>
<h2 id="what-made-us-develop-this-to-a-great-extent">What made us develop this to a great extent? <a class="anchor" href="#what-made-us-develop-this-to-a-great-extent">#</a></h2>
<ul>
<li>Beginner-friendly: An easy setup wizard, easy and ready to use layouts, and themes. We want the
process of typing out a blog and putting it up on your site to be short and
simple.</li>
<li>Speed: Be fast (hugo – written in Go, is remarkably fast)</li>
<li>Maintainable: This ssg will be used by us, hence it should be easy to fix
bugs and add new features</li>
<li>Learning curve: None of us have really shipped a production ready
application. Since AIEP is all about making industry-ready projects, we chose
to use go: so we could spend more <strong>*writing</strong> code* and not worrying about our
toolchain or escaping dependency hell.</li>
<li>Owning a piece of the internet: Aditya and Anirudh registered their own
domain names. Now their anna sites live on [hegde.live] and [sudhir.live]</li>
</ul>
<hr>
<h2 id="benchmarks-can-anna-lift">Benchmarks! Can anna lift?? <a class="anchor" href="#benchmarks-can-anna-lift">#</a></h2>
<p>In simple terms, to beat Saaru's render time (P.S. we did!). Something you
probably never notice while deploying, but it is what pushed us to spend hours
on this.</p>
<p>Adhesh was pretty excited to pick up Go and implement profiling, shaving
milliseconds off build times, when he implemented parallel rendering using
goroutines.</p>
<h3 id="we-cook-">We cook! 🍳 <a class="anchor" href="#we-cook-">#</a></h3>
<p>Here are some screenshots out of our group chats, that demonstrate build times, profiling et-al when having thousands of markdown files or in this case
just copy-pasting a single markdown file en-mass!</p>
<figure>
<img src="images/bench.png" alt="Hyperfine benchmarks comparing the render times of anna, Saaru and 11ty">
</figure>
<blockquote>
<p>After about 2 weeks of training (<em>ahem</em>) coding, we had a (merge) bringing parallel rendering and profiling to the table</p>
</blockquote>
<hr>
<h2 id="profiling-wip">Profiling (WIP) <a class="anchor" href="#profiling-wip">#</a></h2>
<p>For those who love to get technical, anna has a profiling flag.
This flag prints the render profile data to stdout.
It also writes a cpu.prof and mem.prof file, which can be analysed and visualised using <a href="https://pkg.go.dev/runtime/pprof">pprof</a></p>
<p>Here's the CPU profile generated while rendering this site.
This is an SVG showing how much time each function call takes, the number of times it ran in a given test sample and various other useful information.</p>
<!-- ![CPU profile of an anna render generated using pprof](https://raw.githubusercontent.com/acmpesuecc/anna/main/site/static/images/posts/fireside-anna/cpu_prof.svg) -->
<figure>
<img src="images/cpu_prof.svg" alt="CPU profile of an anna render generated using pprof">
</figure>
<p>You may wanna zoom-in about 3-4x times to get to see how our ssg works</p>
<hr>
<h2 id="live-reload">Live Reload <a class="anchor" href="#live-reload">#</a></h2>
<h3 id="prototype">Prototype <a class="anchor" href="#prototype">#</a></h3>
<p>The initial prototype built by Adhesh consisted of a multi-goroutine system.
A new goroutine would be spawned to walk the required directories.
If the current path being walked was a file, the path would be passed to another function along with its current modification time.</p>
<p>The previous mod time of the file would then be retrieved from a map holding the mod times of all the files:</p>
<ul>
<li>If the given file was freshly created, its modification time would be added to the map.</li>
<li>If there was no change in the mod time, no changes would be made.</li>
<li>If there was a change between the current and previous mod times, another function would be called.</li>
</ul>
<p>The new function checks if a child process is running:</p>
<ul>
<li>For the first render, when a process has not been created, a new process is created that runs anna (&quot;go run main.go --serve&quot;)</li>
<li>For successive renders, the existing process is killed and a new process is spawned once again that runs anna.</li>
</ul>
<p>This prototype was not very efficient as it created and killed processes for every change.
It had multiple goroutines attempting to walk the directories at the same time.
It also used multiple mutual exclusion locks to prevent data races.
Integrating this into the project also proved to be challenging.</p>
<h3 id="improved-version">Improved version <a class="anchor" href="#improved-version">#</a></h3>
<p>The live reload feature was improved by Anirudh.
The updated version utilised two goroutines.</p>
<p>The main goroutine used the earlier file walker, with one important change: it sequentially traversed the directory without spawning new goroutines.
For any modification to a file in the current traversal, a vanilla render of the entire site would be performed.
The goroutine would then sleep for a specified duration (currently 1 second) before attempting the next directory traversal.</p>
<p>The secondary goroutine ran a local web server that served the rendered/ directory.</p>
<p>This eliminated all locks and avoided the creation and destruction of any child processes.</p>
<hr>
<h2 id="a-big-rewrite-when-we-went-for-a-tdd-approach-wip">A big rewrite (when we went for a TDD approach) (WIP) <a class="anchor" href="#a-big-rewrite-when-we-went-for-a-tdd-approach-wip">#</a></h2>
<p>Starting off this project, we kept adding functionality without optimization.
We didn’t have a proper structure; PRs would keep breaking features and overwriting functions written by team-mates.</p>
<p>Anirudh and Aditya dived into the codebase to rebuild the application following a TDD-approach.</p>
<h3 id="a-new-proposed-rendering-system">A new proposed rendering system <a class="anchor" href="#a-new-proposed-rendering-system">#</a></h3>
<h4 id="maingo">main.go <a class="anchor" href="#maingo">#</a></h4>
<p>Firstly, we refactored main.go to only handle flags.
The rest of the program logic was moved to other packages.
A benchmark for main.go was also written to time the entire application.</p>
<h4 id="pkg-modules">pkg/ modules <a class="anchor" href="#pkg-modules">#</a></h4>
<p>Modules previously part of <code>cmd/anna/utils.go</code> and <code>cmd/anna/main.go</code> were to be split between <code>pkg/parsers/</code>, <code>pkg/engine/</code> and <code>pkg/helper</code></p>
<pre><code class="language-text">pkg
├─── helpers
│   ├─── helpers.go
│   └─── helper_test.go
├─── engine
│   ├─── anna_engine.go
│   ├─── anna_engine_test.go
│   ├─── engine.go
│   ├─── engine_test.go
│   ├─── user_engine.go
│   ├─── user_engine_test.go
│   └─── engine_integration_test.go
└─── parsers
	├── parser.go
	├── parser_test.go
	└── parser_integration_test.go
</code></pre>
<blockquote>
<ul>
<li>Wrote unit and integration tests for the parser and engine package</li>
</ul>
</blockquote>
<h4 id="splitting-the-render-pipeline">Splitting the render pipeline <a class="anchor" href="#splitting-the-render-pipeline">#</a></h4>
<p>Currently, there are three kinds of files that have to be rendered.
One set includes user-defined files such as <code>index.md</code>, <code>docs.md</code> and various posts. These are specific to a user.</p>
<p>The second set of files that are rendered include <code>tags.html</code> and <code>posts.html</code>, which are present on every site rendered by anna.</p>
<p>The third set of files included the tag-sub pages.
For every tag, there would be a corresponding sub-page containing all of the posts with the same tag.</p>
<blockquote>
<ul>
<li>Split the rendering system to make parallelisation easier by switching to a three method system.</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Render &quot;user defined&quot; pages which include all markdown files and posts (This method has been parallelised, Render tags and tag-sub pages separately, which could be parallelised in the future</li>
</ul>
</blockquote>
<hr>
<h2 id="tags-wip">Tags (WIP) <a class="anchor" href="#tags-wip">#</a></h2>
<p>You can tag posts by hand, at the start of each markdown file and you get a
nice sub-page on your site so readers can discover similar content or browser
by category.</p>
<ul>
<li>Organizing posts into collections based on tags</li>
<li>Reverse search for posts of a certain category</li>
</ul>
<hr>
<h2 id="to-search-or-not-to-search-">To search or not to search? 🤔 <a class="anchor" href="#to-search-or-not-to-search-">#</a></h2>
<blockquote>
<p>That is the question &gt; Is our <em>static site</em> becoming dynamic and at what cost?</p>
</blockquote>
<p>We were wondering if we’d need a search function on our site since Google and
any other web-crawler index our site anyway.
If we needed to implement it, we had a constraint: do not use an API.
It had to be static and local to be user-friendly to work with.
Aditya and Anirudh implemented a JSON index generator that uses &quot;Deep Data Merge&quot; to index posts on our site.</p>
<p>This index is generated during the site render and functions without any lag or noticeable delay when searching across posts.
We mean to re-write it using WASM if necessary.</p>
<p>Here's a gif demonstrating search</p>
<figure>
<img src="images/search.gif" alt="Demonstration of the search feature in anna">
</figure>
<h2 id="js-integration-as-plugins">JS integration as plugins <a class="anchor" href="#js-integration-as-plugins">#</a></h2>
<p>Aditya added a field to our frontmatter which lets you pick and add certain JS
based snippets to your site.
This way, you get to add <code>highlight.js</code> support, analytics scripts and donation page widgets; that you can source from the <code>static/scripts</code> folder and toggle as needed per-markdown page.</p>
<h2 id="wizard">Wizard <a class="anchor" href="#wizard">#</a></h2>
<p>Nathan proceeded to work on a GUI; a web-based wizard that let's a new user
setup anna along with a couple of easter eggs along the way 🍚</p>
<p>The wizard lets a user pick a theme, enter your name, pick navbar elements, and
validates fields using regex checks so you don’t need to worry about relative
paths in baseURLs, canonical links, and sitemaps. After successfully completing
the setup, the wizard launches a live preview of your site in a new tab.</p>
<figure>
<img src="images/wizard.gif" alt="Demonstration of the GUI wizard in anna">
</figure>
<h3 id="raw-html">Raw HTML <a class="anchor" href="#raw-html">#</a></h3>
<p>What if you'd want to add a contact form to your site? or embed YouTube videos or iframes of your choosing?</p>
<p>Anna let's us do that! Although, the point of a static site generator is to
quickly get to writing and focusing on the content.
You can still embed js elements and iframe as needed to showcase any interesting YouTube videos or to just rickroll people!</p>
<hr>
<h3 id="changelog-showcasing-important-additions-which-are-yet-to-be-added-to-this-blog">changelog: showcasing important additions, which are yet to be added to this blog <a class="anchor" href="#changelog-showcasing-important-additions-which-are-yet-to-be-added-to-this-blog">#</a></h3>
<p>Nathan:</p>
<ul>
<li>feat: implement sitemap.xml by @polarhive in #17</li>
<li>feat: ogp tags and atom feed by @polarhive in #33</li>
<li>feat: bootstrap site and import stylesheets by @polarhive in #73</li>
</ul>
<p>Aditya:</p>
<ul>
<li>feat: implement drafts by @bwaklog in #9</li>
<li>feat: chronological feed, js plugins (eg: light.js, prism.js) by @bwaklog in #32</li>
</ul>
<hr>
<h2 id="feedback--learnings">Feedback? / Learnings <a class="anchor" href="#feedback--learnings">#</a></h2>
<p>We are at week: 4/6 and have a lot of things in store and bugs to squash!</p>
<blockquote>
<p>Feel free to ask any questions / send feature requests you'd like to see?</p>
</blockquote>
<p>This blog post misses out of many not-so well documented features and learnings that
we got during midnight calls and the patches we kept sending each other fixing trivial but
interesting issues.
Have a look at our <a href="https://github.com/acmpesuecc/anna/issues">GitHub</a>, for more</p>
<hr>
<p>Today <a href="https://github.com/acmpesuecc/anna/releases/latest">anna</a> is tagged at v1.0.0 and we use it on our personal sites:
<a href="https://hegde.live">hegde.live</a> // <a href="https://sudhir.live">sudhir.live</a> // <a href="https://polarhive.net">polarhive.net</a></p>
<hr>
<p>01100001 01101110 01101110 01100001</p>
]]></content>
    </entry>
<entry>
        <title>Genesis</title>
        <link href="https://sudhir.liveposts/genesis/index.html/>
        <id>https://sudhir.liveposts/genesis/index.html</id>
        <updated>2024-03-08T05:30:00+05:30</updated>
        <content type="html"><![CDATA[<h1 id="table-of-contents">Table of Contents <a class="anchor" href="#table-of-contents">#</a></h1>
<ul>
<li>
<a href="#background">Background</a></li>
<li>
<a href="#why-i-made-a-personal-site">Why I made a personal site</a></li>
</ul>
<hr>
<p>Hello!</p>
<p>This is the first post that I'm writing for this site. Indeed, it's a proud moment to see my very own home on the internet.</p>
<p>While I began writing this post today, the site in itself has been a long time coming.</p>
<h3 id="background">Background <a class="anchor" href="#background">#</a></h3>
<p>I already had a website running before, written in markdown and rendered using <a href="https://gohugo.io">Hugo</a>. While this worked well, it never felt like the final answer. I wanted to power my website with something I'd built myself.
As part of <a href="https://acmpesuecc.github.io/aiep">AIEP</a>, our team, consisting of Adhesh, Aditya, Nathan and me, began working on a custom <a href="https://github.com/acmpesuecc/anna">static site generator</a> in Go.</p>
<blockquote>
<p>Fast forward a few weeks, and I've got my site up and running. Staying up late has been worth it.</p>
</blockquote>
<hr>
<h3 id="why-i-made-a-personal-site">Why I made a personal site <a class="anchor" href="#why-i-made-a-personal-site">#</a></h3>
<p>I needed a space to share my thoughts with others. A place to showcase who I was as a person, as well as my goals and achievements.
A personal site seemed like a good fit.
Having your own website, available for anyone in the world to access, is a unique feeling.</p>
<p>I also wanted to write often. It could be anything, ranging from a technical article, to some thoughts that I wanted to share.
I believe writing helps me communicate my ideas better. It forces one to do their research, teaching something new in the process. It also reduces mental clutter.</p>
<blockquote>
<p>Hopefully, this is start of something amazing.</p>
</blockquote>
]]></content>
    </entry>
</feed>
